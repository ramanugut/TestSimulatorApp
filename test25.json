{
  "testName": "Self Assessment 2 Quiz",
  "questions": [
    {
      "text": "What is the purpose of the `try-catch` block in C#?",
      "options": [
        "To declare variables",
        "To handle exceptions and prevent application crashes",
        "To define a loop",
        "To perform mathematical calculations"
      ],
      "correctAnswer": "To handle exceptions and prevent application crashes",
      "explanation": "The `try-catch` block is the primary mechanism for handling errors in C#. Code that may cause an error is placed in the `try` block, and the code to handle the error is placed in the `catch` block."
    },
    {
      "text": "Which keyword is used to manually throw an exception in C#?",
      "options": [
        "`catch`",
        "`throw`",
        "`try`",
        "`exception`"
      ],
      "correctAnswer": "`throw`",
      "explanation": "The `throw` keyword is used to signal that an error condition has occurred (an exception) during program execution."
    },
    {
      "text": "In a `try-catch-finally` block, when is the `finally` block executed?",
      "options": [
        "Only when an exception occurs",
        "Only when no exception occurs",
        "Always, regardless of whether an exception occurs or not",
        "It is never executed"
      ],
      "correctAnswer": "Always, regardless of whether an exception occurs or not",
      "explanation": "The `finally` block is guaranteed to execute after the `try` and any `catch` blocks complete. It is typically used for cleanup code, such as closing files or database connections."
    },
    {
      "text": "What will be the output of the following code snippet?\n```csharp\ntry\n{\n    int result = 10 / 0;\n    Console.WriteLine(\"Result: \" + result);\n}\ncatch (DivideByZeroException ex)\n{\n    Console.WriteLine(\"Error: Cannot divide by zero.\");\n}\nfinally\n{\n    Console.WriteLine(\"Finally block executed.\");\n}\n```",
      "options": [
        "Result: 0",
        "Error: Cannot divide by zero.\nFinally block executed.",
        "The application will crash.",
        "Result: 0\nFinally block executed."
      ],
      "correctAnswer": "Error: Cannot divide by zero.\nFinally block executed.",
      "explanation": "Dividing by zero throws a `DivideByZeroException`. The program flow jumps to the corresponding `catch` block, which prints the error message. Afterwards, the `finally` block always executes, printing its message."
    },
    {
      "text": "Which of the following is NOT a standard exception type in .NET?",
      "options": [
        "`System.NullReferenceException`",
        "`System.IndexOutOfRangeException`",
        "`System.IO.IOException`",
        "`System.MyCustomException`"
      ],
      "correctAnswer": "`System.MyCustomException`",
      "explanation": "`MyCustomException` is not a built-in .NET exception. While developers can create custom exceptions, the other options are standard exceptions provided by the .NET framework."
    },
    {
      "text": "What is the base class for all exceptions in .NET?",
      "options": [
        "`System.ApplicationException`",
        "`System.Exception`",
        "`System.SystemException`",
        "`System.Object`"
      ],
      "correctAnswer": "`System.Exception`",
      "explanation": "In the .NET Framework, all exceptions are derived from the base class `System.Exception`."
    },
    {
      "text": "Can a `try` block exist without a `catch` block?",
      "options": [
        "Yes, if it has a `finally` block.",
        "No, a `try` block must always have at least one `catch` block.",
        "Yes, a `try` block can stand alone.",
        "Only in asynchronous methods."
      ],
      "correctAnswer": "Yes, if it has a `finally` block.",
      "explanation": "A `try` block must be followed by either at least one `catch` block or a `finally` block. A `try-finally` block without a `catch` is valid syntax."
    },
    {
      "text": "What happens if an exception is thrown inside a `catch` block?",
      "options": [
        "The `finally` block is skipped.",
        "The application immediately terminates.",
        "The exception is automatically handled by the runtime.",
        "The exception propagates up the call stack, and if not caught by an outer `try-catch` block, the application will terminate."
      ],
      "correctAnswer": "The exception propagates up the call stack, and if not caught by an outer `try-catch` block, the application will terminate.",
      "explanation": "An exception thrown within a `catch` block behaves like any other unhandled exception. It will propagate upwards, seeking a suitable handler in an outer scope. If none is found, the application will crash."
    },
    {
      "text": "Which property of the Exception class provides a human-readable description of the error?",
      "options": [],
      "correctAnswer": "Message",
      "explanation": "The `Exception.Message` property gets a string that describes the nature of the error."
    },
    {
      "text": "What is the purpose of exception filters in C# 6.0 and later?",
      "options": [
        "To prevent any exceptions from being thrown.",
        "To add a condition to a `catch` block, so it only executes if the condition is true.",
        "To change the type of an exception.",
        "To log exceptions automatically."
      ],
      "correctAnswer": "To add a condition to a `catch` block, so it only executes if the condition is true.",
      "explanation": "Exception filters use the `when` keyword to add a conditional clause to a `catch` block. The block only executes if the specific exception type is caught AND the condition in the `when` clause is met."
    }
  ]
}
