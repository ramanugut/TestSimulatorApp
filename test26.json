{
  "testName": "Self Assessment 3 Quiz (Reviewed & Extended)",
  "questions": [
    {
      "text": "Which event is triggered when a user clicks a `Button` control in a Windows Forms application?",
      "options": [
        "`MouseEnter`",
        "`Click`",
        "`KeyDown`",
        "`FormLoad`"
      ],
      "correctAnswer": "`Click`",
      "explanation": "The `Click` event is the primary event for a `Button` control. It fires whenever the user clicks the button with the mouse or presses the ENTER key when the button has focus."
    },
    {
      "text": "In C# Windows Forms, what property is used to set the text displayed on a `Label` control?",
      "options": [
        "`Value`",
        "`Caption`",
        "`Text`",
        "`String`"
      ],
      "correctAnswer": "`Text`",
      "explanation": "The `Text` property is a standard property for most visible controls (like `Label`, `Button`, `TextBox`, `Form`) and is used to get or set the text content displayed by the control."
    },
    {
      "text": "How do you add an item to a `ListBox` control programmatically?",
      "options": [
        "`myListBox.AddItem(\"New Item\");`",
        "`myListBox.Items.Add(\"New Item\");`",
        "`myListBox.Add(\"New Item\");`",
        "`myListBox.Items.Insert(\"New Item\");`"
      ],
      "correctAnswer": "`myListBox.Items.Add(\"New Item\");`",
      "explanation": "To manipulate the items in a `ListBox`, you must access its `Items` collection. The `Add()` method of the `Items` collection appends a new item to the end of the list."
    },
    {
      "text": "Which control is best suited for single-line user input of text?",
      "options": [
        "`Label`",
        "`TextBox`",
        "`RichTextBox`",
        "`Button`"
      ],
      "correctAnswer": "`TextBox`",
      "explanation": "The `TextBox` control is the standard component for accepting user-entered text. `Label` is for display only, `RichTextBox` is for formatted or multi-line text, and `Button` is for actions."
    },
    {
      "text": "What is the purpose of the `Form.Load` event?",
      "options": [
        "To close the form",
        "To trigger when the form is first displayed",
        "To handle button clicks",
        "To resize the form"
      ],
      "correctAnswer": "To trigger when the form is first displayed",
      "explanation": "The `Form.Load` event fires just before a form is shown for the first time. It's the ideal place to put initialization code, such as loading data or setting default values for controls."
    },
    {
      "text": "To get the selected item from a `ComboBox`, you would use which property?",
      "options": [
        "`SelectedValue`",
        "`SelectedItem`",
        "`SelectedText`",
        "`SelectedIndex`"
      ],
      "correctAnswer": "`SelectedItem`",
      "explanation": "The `SelectedItem` property returns the complete object that is currently selected. In contrast, `SelectedIndex` returns the zero-based index of the selection, and `SelectedValue` is primarily used for data binding purposes."
    },
    {
      "text": "True or False: A `RadioButton` control allows users to select multiple options from a group.",
      "options": [
        "True",
        "False"
      ],
      "correctAnswer": "False",
      "explanation": "`RadioButton` controls are mutually exclusive within a container (like a `GroupBox`). This means only one radio button in a group can be selected at a time. For multiple selections, `CheckBox` controls are used."
    },
    {
      "text": "Which property of a `Timer` control sets the interval in milliseconds between ticks?",
      "options": [
        "`Frequency`",
        "`Duration`",
        "`Interval`",
        "`Speed`"
      ],
      "correctAnswer": "`Interval`",
      "explanation": "The `Interval` property defines the elapsed time in milliseconds between `Tick` events. For example, setting `Interval` to 1000 will cause the `Timer.Tick` event to fire once every second."
    },
    {
      "text": "What method is used to display a standard dialog box with a message to the user?",
      "options": [
        "`Alert.Show()`",
        "`MessageBox.Display()`",
        "`Dialog.Popup()`",
        "`MessageBox.Show()`"
      ],
      "correctAnswer": "`MessageBox.Show()`",
      "explanation": "The static `MessageBox.Show()` method is the standard function in Windows Forms for displaying a modal message box to the user. It can be customized with different buttons, icons, and text."
    },
    {
      "text": "Which property must be set to `true` for a `TextBox` to display multiple lines of text?",
      "options": [],
      "correctAnswer": "Multiline",
      "explanation": "Setting the `Multiline` property of a `TextBox` to `true` enables it to accept and display multiple lines of text. To handle overflow, you should also consider setting the `ScrollBars` property."
    },
    {
      "text": "Which control allows you to group other controls like `RadioButton`s together?",
      "options": [
        "`Panel`",
        "`GroupBox`",
        "`FlowLayoutPanel`",
        "`TableLayoutPanel`"
      ],
      "correctAnswer": "`GroupBox`",
      "explanation": "A `GroupBox` is a container control that displays a frame and a caption around a group of controls. It's primarily used to group `RadioButton` controls so that they function as a single, mutually exclusive set."
    },
    {
      "text": "What property of a form determines the text shown in its title bar?",
      "options": [
        "`Name`",
        "`Title`",
        "`Text`",
        "`Caption`"
      ],
      "correctAnswer": "`Text`",
      "explanation": "Just like with Labels and Buttons, the `Text` property of a `Form` is used to set the content that appears in its title bar."
    },
    {
      "text": "How do you programmatically close a Windows Form?",
      "options": [
        "`this.Exit();`",
        "`this.Close();`",
        "`this.Terminate();`",
        "`Application.Quit();`"
      ],
      "correctAnswer": "`this.Close();`",
      "explanation": "The `Close()` method is called on a form instance (`this` refers to the current form) to close it. `Application.Exit()` closes the entire application, not just one form."
    },
    {
      "text": "Which control is used to display a list of items that can be checked by the user, allowing multiple selections?",
      "options": [
        "`ListBox`",
        "`CheckedListBox`",
        "`ComboBox`",
        "`ListView`"
      ],
      "correctAnswer": "`CheckedListBox`",
      "explanation": "The `CheckedListBox` control extends the `ListBox` control by displaying a checkbox next to each item, which is ideal for presenting lists where the user can make multiple selections."
    },
    {
      "text": "Which event fires repeatedly when a `Timer` component is enabled?",
      "options": [
        "`Elapsed`",
        "`Repeat`",
        "`Tick`",
        "`IntervalReached`"
      ],
      "correctAnswer": "`Tick`",
      "explanation": "The `Timer` component's `Tick` event is raised repeatedly at the time interval specified by the `Interval` property. You place the code you want to execute regularly in this event handler."
    }
  ]
}
